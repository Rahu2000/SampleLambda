from botocore.exceptions import ClientError

import boto3
import json
import base64
import time

client = boto3.client('autoscaling', 'ap-northeast-2')
ec2 = boto3.client('ec2', 'ap-northeast-2')

def validate_user_params(job_data):
    """
    Decodes the JSON user parameters and validates the required properties.
    Args:
        job_data: The job data structure containing the UserParameters string which should be a valid JSON structure
    Raises:
        Exception: The JSON can't be decoded or a property is missing.
    """
    if 'ami_name' not in job_data:
    # Validate that the ami_name is provided, otherwise fail the job
        # with a helpful message.
        raise Exception('Your UserParameters JSON must include the ami_name')

    if 'config_name' not in job_data:
        # Validate that the config_name is provided, otherwise fail the job
        # with a helpful message.
        raise Exception('Your UserParameters JSON must include the config_name')

    if 'group_name' not in job_data:
        # Validate that the group_name is provided, otherwise fail the job
        # with a helpful message.
        raise Exception('Your UserParameters JSON must include the group_name')

def auto_scaling_group_configuration_formatter(values):
    # remove unnecessary keys
    if 'AutoScalingGroupARN' in values: del values['AutoScalingGroupARN']
    if 'CreatedTime' in values: del values['CreatedTime']

    # check mandatory values
    if 'AutoScalingGroupName' not in values:
        raise Exception('AutoScalingGroupName is empty')
    if 'LaunchConfigurationName' not in values:
        raise Exception('LaunchConfigurationName is empty')

    # initial values
    if 'LaunchTemplate' not in values: values['LaunchTemplate']={}
    if 'MixedInstancesPolicy' not in values: values['MixedInstancesPolicy']={}
    if 'InstanceId' not in values: values['InstanceId']=''
    if 'MinSize' not in values: values['MinSize']=0
    if 'MaxSize' not in values: values['MaxSize']=0
    if 'DesiredCapacity' not in values: values['DesiredCapacity']=0
    if 'DefaultCooldown' not in values: values['DefaultCooldown']=300
    if 'AvailabilityZones' not in values: values['AvailabilityZones']=[]
    if 'LoadBalancerNames' not in values: values['LoadBalancerNames']=[]
    if 'TargetGroupARNs' not in values: values['TargetGroupARNs']=[]
    if 'HealthCheckType' not in values: values['HealthCheckType']=''
    if 'HealthCheckGracePeriod' not in values: values['HealthCheckGracePeriod']=0
    if 'PlacementGroup' not in values: values['PlacementGroup']=''
    if 'VPCZoneIdentifier' not in values: values['VPCZoneIdentifier']=''
    if 'TerminationPolicies' not in values: values['TerminationPolicies']=[]
    if 'NewInstancesProtectedFromScaleIn' not in values: values['NewInstancesProtectedFromScaleIn']=False
    if 'LifecycleHookSpecificationList' not in values: values['LifecycleHookSpecificationList']=[]
    if 'Tags' not in values: values['Tags']=[]
    if 'ServiceLinkedRoleARN' not in values: values['ServiceLinkedRoleARN']=''

    return values

def get_image_id(image_name):
    tag_key="".join((image_name,'*'))
    try:
        response = ec2.describe_images(
            Filters=[
                {'Name': 'tag:Name', 'Values': [tag_key]},
                {'Name': 'tag:ssfversion', 'Values': ['latest']}
            ],
            Owners=['self']
        )
        ami_id = response['Images'][0]['ImageId']
        print('ami_id: {}'.format(ami_id))
        return ami_id
    except Exception as e:
        raise e

def describe_auto_scaling_groups(group_name):
    try:
        return client.describe_auto_scaling_groups(AutoScalingGroupNames=[group_name])
    except Exception as e:
        raise e

def delete_auto_scaling_group(group_name):
    try:
        client.delete_auto_scaling_group(AutoScalingGroupName=group_name)
    except Exception as e:
        raise e

def create_auto_scaling_group(configuration):
    print('new auto scaling group configurations: {}', configuration)
    try:
        client.create_auto_scaling_group(
            AutoScalingGroupName=configuration['AutoScalingGroupName'],
            LaunchConfigurationName=configuration['LaunchConfigurationName'],
            LaunchTemplate=configuration['LaunchTemplate'],
            MixedInstancesPolicy=configuration['MixedInstancesPolicy'],
            #InstanceId=configuration['InstanceId'],
            MinSize=configuration['MinSize'],
            MaxSize=configuration['MaxSize'],
            DesiredCapacity=configuration['DesiredCapacity'],
            DefaultCooldown=configuration['DefaultCooldown'],
            AvailabilityZones=configuration['AvailabilityZones'],
            LoadBalancerNames=configuration['LoadBalancerNames'],
            TargetGroupARNs=configuration['TargetGroupARNs'],
            HealthCheckType=configuration['HealthCheckType'],
            HealthCheckGracePeriod=configuration['HealthCheckGracePeriod'],
            #PlacementGroup=configuration['PlacementGroup'],
            VPCZoneIdentifier=configuration['VPCZoneIdentifier'],
            TerminationPolicies=configuration['TerminationPolicies'],
            NewInstancesProtectedFromScaleIn=configuration['NewInstancesProtectedFromScaleIn'],
            LifecycleHookSpecificationList=configuration['LifecycleHookSpecificationList'],
            Tags=configuration['Tags'],
            ServiceLinkedRoleARN=configuration['ServiceLinkedRoleARN']
        )
    except Exception as e:
        raise e

def describe_launch_configurations(config_name):
    try:
        return client.describe_launch_configurations(LaunchConfigurationNames=[config_name])
    except Exception as e:
        raise e

def delete_launch_configuration(configuration_name):
    # delete old launch configuration
    try:
        client.delete_launch_configuration(LaunchConfigurationName=configuration_name)
    except ClientError as e:
        raise e

def create_launch_configuration(configuration, imageId):
    print('new auto scaling launch configurations: {}, imageId: {}', configuration, imageId)
    try:
        # create new launch configuration
        client.create_launch_configuration(
            ImageId=imageId,
            LaunchConfigurationName=configuration['LaunchConfigurationName'],
            InstanceType=configuration['InstanceType'],
            KeyName=configuration['KeyName'],
            SecurityGroups=configuration['SecurityGroups'],
            UserData=base64.b64decode(configuration['UserData']).decode("UTF-8"),
            InstanceMonitoring=configuration['InstanceMonitoring'],
            IamInstanceProfile=configuration['IamInstanceProfile'],
            EbsOptimized=configuration['EbsOptimized'],
            BlockDeviceMappings=configuration['BlockDeviceMappings']
        )
    except ClientError as e:
        raise e

def lambda_handler(event, context):
    try:
        print('recreate_auto_scaling_launch_configuration is start')
        print('target ami: {}, tareget autoscaling launch configuration: {}, autoscaling group name: {}'.format(event['ami_name'], event['config_name'], event['group_name']))
        
        # Validate event parameters
        validate_user_params(event)

        # get current auto scaling group
        auto_scaling_groups = describe_auto_scaling_groups(event['group_name'])
        
        # delete current auto scaling group
        delete_auto_scaling_group(event['group_name'])

        # wating for delete configuration
        while True:
            time.sleep(1)
            del_result = describe_auto_scaling_groups(event['group_name'])
            if not del_result['AutoScalingGroups']:
                break

        # get latest ami id
        imageId = get_image_id(event['ami_name'])

        # get current launch configuration
        launch_configs = describe_launch_configurations(event['config_name'])

        # create new launch configuration and autoscaling launch configuration
        for launch_config in launch_configs['LaunchConfigurations']:
            #delete old autoscaling launch configuration
            delete_launch_configuration(launch_config['LaunchConfigurationName'])

            # wating for deleting configuration
            while True:
                time.sleep(1)
                del_result = describe_launch_configurations(launch_config['LaunchConfigurationName'])
                if not del_result['LaunchConfigurations']:
                    break

            # create new autoscaling launch configuration
            create_launch_configuration(launch_config, imageId)

            # wating for delete configuration
            while True:
                time.sleep(1)
                create_result = describe_launch_configurations(launch_config['LaunchConfigurationName'])
                if create_result['LaunchConfigurations']:
                    break

            # create new autoscaling group
            create_auto_scaling_group(auto_scaling_group_configuration_formatter(auto_scaling_groups['AutoScalingGroups'][0]))

    except Exception as e:
        raise e
